0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.26
3 info using node@v0.10.21
4 verbose node symlink /usr/local/bin/node
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /Users/ricardo/.npm/3a52ce78-.lock
11 verbose tar pack [ '/Users/ricardo/.npm/wsdl2.js-ssl/0.1.0/package.tgz', '.' ]
12 verbose tarball /Users/ricardo/.npm/wsdl2.js-ssl/0.1.0/package.tgz
13 verbose folder .
14 info prepublish wsdl2.js-ssl@0.1.0
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. /Users/ricardo/.npm/1f1177db-tar.lock
17 silly lockFile 0d3d6bb8-m-wsdl2-js-ssl-0-1-0-package-tgz tar:///Users/ricardo/.npm/wsdl2.js-ssl/0.1.0/package.tgz
18 verbose lock tar:///Users/ricardo/.npm/wsdl2.js-ssl/0.1.0/package.tgz /Users/ricardo/.npm/0d3d6bb8-m-wsdl2-js-ssl-0-1-0-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile 0d3d6bb8-m-wsdl2-js-ssl-0-1-0-package-tgz tar:///Users/ricardo/.npm/wsdl2.js-ssl/0.1.0/package.tgz
22 silly lockFile 0d3d6bb8-m-wsdl2-js-ssl-0-1-0-package-tgz tar:///Users/ricardo/.npm/wsdl2.js-ssl/0.1.0/package.tgz
23 silly lockFile 7e115052-o-npm-wsdl2-js-ssl-0-1-0-package /Users/ricardo/.npm/wsdl2.js-ssl/0.1.0/package
24 verbose lock /Users/ricardo/.npm/wsdl2.js-ssl/0.1.0/package /Users/ricardo/.npm/7e115052-o-npm-wsdl2-js-ssl-0-1-0-package.lock
25 silly lockFile 7e115052-o-npm-wsdl2-js-ssl-0-1-0-package /Users/ricardo/.npm/wsdl2.js-ssl/0.1.0/package
26 silly lockFile 7e115052-o-npm-wsdl2-js-ssl-0-1-0-package /Users/ricardo/.npm/wsdl2.js-ssl/0.1.0/package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { author:
29 silly publish    { name: 'Ricardo Sousa',
29 silly publish      email: 'ricardo.sousa@challenge.pt',
29 silly publish      url: 'http://www.challenge.pt/' },
29 silly publish   name: 'wsdl2.js-ssl',
29 silly publish   description: 'Consumes a WSDL file and produces a high quality, manageable Javascript library with TLS/SSL support.',
29 silly publish   version: '0.1.0',
29 silly publish   repository:
29 silly publish    { type: 'git',
29 silly publish      url: 'https://github.com/challengeit/wsdl2.js-ssl.git' },
29 silly publish   keywords: [ 'soap', 'wsdl', 'ssl', 'tls', 'generator', 'converter' ],
29 silly publish   dependencies: { request: '>=2.16.6', xml2json: '>=0.3.2' },
29 silly publish   engines: { node: '*' },
29 silly publish   preferGlobal: 'true',
29 silly publish   main: 'wsdl2-ssl.js',
29 silly publish   license: 'GPL',
29 silly publish   readme: '## About this\n\nThis is a fork from [wsdl2.js](https://github.com/holidayextras/wsdl2.js) repository with support for TLS/SSL.\n\nAt this point, only PFX and PKCS12 formats are supported.\n\nFor use the wsdl2.js-ssl: \n\n- ```wsdl2.js-sll [serviceName] [/local/path/to/wsdl] -pfx=[/local/path/to/pfx_p12] -passphrase="password"```\n\nThe new options ``-pfx`` and ```-passphrase``` are optional. Are only needed for TLS/SSL.\n\n\n---\n\n# Original README from Wsdl2.js\n\n## Introduction\nThis is a NodeJS tool to consume a WSDL file and output a neat, manageable Javascript library. It is not 100% complete, but it gives us full coverage of the services we need at Holiday Extras. If it doesn\'t do everything you need, fork us and contribute back to the community :)\n\n## Where do I find it?\nEither get it from npm:\n```\nsudo npm install -g wsdl2.js\n```\nOr checkout the repo:\n```\ngit clone https://github.com/holidayextras/wsdl2.js.git\nnpm install\n```\n\n## How do I use it?\nThis will generate a folder called [serviceName] in the current directory ready to be require\'d and used:\n```\nwsdl2.js [serviceName] [/local/path/to/wsdl]\n```\n\n## Requirements for using the generated code\nNote: these modules are installed by npm-installing wsdl2.js\n```\nnpm install request xml2json\n```\n\n## Generated code structure\n```\n./[ServiceName]/\n|   // This holds one file per defined Element within the WSDL\n├── Element\n│   ├── SomeDefinedElement.js\n|   └── ...\n|   // This is the main file which handles requests, JSON->XML->JSON, etc\n├── index.js\n|   // This is where mock data goes from [myService].Settings.createMock\n├── Mocks\n│   ├── WsdlOperationName.js\n|   └── ...\n|   // This library provides strong typing, it\'s used in each Element/Type\n├── Modeler.js\n|   // This file defines the top level functionality found within the WSDL\n├── ServiceDefinition.js\n|   // This holds one file per defined Type within the WSDL\n└── Type\n    ├── SomeDefinedType.js\n    └── ...\n```\n\n## Using the generated code\nStart by including the generated code:\n```javascript\nvar Service = require("path/to/generated/code");\nvar EC2 = require("lib/EC2");\n```\nThis is how we create a new request:\n```javascript\nvar someRequest = new Service.[WSDL-Binding-Name].[WSDL-Operation-Name]();\nvar assignRequest = new EC2.AmazonEC2Port.AssignPrivateIpAddresses();\n```\nSetting basic properties is trivial\n```javascript\nsomeRequest.someSimpleProperty = 1;\n```\nMost requests consist of several complex types, they are all found within our service object:\n```javascript\nsomeRequest.someElementProperty = new Service.Elements.[WSDL-Element-Name]();\nsomeRequest.someTypeProperty = new Service.Types.[WSDL-Type-Name]();\n```\nPopulating Requests/Elements/Types can be done one at a time:\n```javascript\nsomeRequest.someNumber = 1;\nsomeRequest.someString = "1";\n```\nWe can also populate directly from a JSON object:\n```javascript\nvar json = { someNumber: 1, someString: "1" };\nsomeRequest = new Service.TestRequest(json);\n// someRequest.someNumber == 1\n// someRequest.someString == "1"\n```\nTrying to set a property\'s value to an invalid type will be discarded:\n```javascript\nsomeRequest.PersonElement = null;\nsomeRequest.PersonElement = new SomeRandomObject();\n// someRequest.PersonElement == null;\n```\nIf we have an array of objects there\'s a helper function to save typing:\n```javascript\nsomeRequest.PeopleList = new Service.Types.ArrayOfPeople;\nsomeRequest.PeopleList.newChild({ firstname: "Oli", age: 24 });\n// is the equivalent of:\nsomeRequest.PeopleList = new Service.Types.ArrayOfPeople;\nvar newPerson = new Service.Types.Person();\nnewPerson.firstname = "Oli";\nnewPerson.age = 24;\nsomeRequest.PeopleList.push(newPerson);\n```\nMaking the request is trivial:\n```javascript\nsomeRequest.request(function(err, response) {\n  // \'response\' is a modeled object, it WILL conform to the WSDL.\n  //... w00p!\n});\n```\nOnce we have a request and we want to edit it by adding properties not found in the WDSL, we must first extract the data from the response:\n```javascript\nsomeRequest.request(function(err, response) {\n  response.SomeInvalidProperty = "testing";\n  // response.SomeInvalidProperty == null\n  var myResponse = response.extract();\n  myResponse.SomeInvalidProperty = "testing";\n  // myResponse.SomeInvalidProperty == "testing"\n});\n```\n\n## Runtime Settings and Debugging\n```javascript\nvar Service = require("path/to/generated/code");\n\n// This next statement will enable debugging for ALL soap requests\n// It prints to stdout JSON objects, XML documents, etc\n// default: false\nService.Settings.debugSoap = true;\n\n// This next statement will enable benchmarking for ALL soap requests\n// It prints to stdout the name of each request and its duration in ms\n// default: true\nService.Settings.benchmark = true;\n\n// This next statement will store the most recent request of each type to file\n// It outputs to [/path/to/generated/code]/Mocks/[request-name]\n// default: false\nService.Settings.createMock = true;\n\n// This next statement will use saved mock requests instead of real requests\n// default: false\nService.Settings.useMock = true;\n\n// We can debug single SOAP requests by using the .debug() function, which is\n// a property of every request and response object\nvar additionRequest = new Service.MathService.AdditionFunction(json);\nadditionRequest.debug(); // Watch your console output\nadditionRequest.request(function(err, response) {\n  response.debug(); // Watch your console output\n  if (err || !response) {\n    return callback(err || "No response?");\n  }\n  \n  //... w00p!\n});\n```\n\n## Checking the generated service definition\nGeneric example of ./[ServiceName]/ServiceDefinition.js:\n```javascript\nmodule.exports = {\n  "[WSDL-Binding-Name]": {\n    "namespace": "http://blahblah.com/webservices/",\n    "serviceUrl": "https://www.blahblah.com/path/to/service.blah",\n    "[WSDL-Operation-Name]": {\n      "soapAction": "blahblahblah",\n      "input": "[Top-Level-Request-Element-For-Operation]",\n      "output": "[Top-Level-Response-Element-For-Operation]"\n    },\n    ...\n  },\n  ...\n}\n```\nExample of Amazon\'s EC2 service:\n```javascript\nmodule.exports = {\n  "AmazonEC2Port": {\n    "namespace": "http://ec2.amazonaws.com/doc/2013-02-01/",\n    "serviceUrl": "https://ec2.amazonaws.com/",\n    "ActivateLicense": {\n      "soapAction": "ActivateLicense",\n      "input": "ElementActivateLicense",\n      "output": "ElementActivateLicenseResponse"\n    },\n    "AssignPrivateIpAddresses": {\n      "soapAction": "AssignPrivateIpAddresses",\n      "input": "ElementAssignPrivateIpAddresses",\n      "output": "ElementAssignPrivateIpAddressesResponse"\n    },\n    ...\n  },\n  ...\n}\n```\n\n',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   gitHead: 'c0e1d9971bf3dd325f1c85f117ac4caf29921b57',
29 silly publish   bugs: { url: 'https://github.com/challengeit/wsdl2.js-ssl/issues' },
29 silly publish   homepage: 'https://github.com/challengeit/wsdl2.js-ssl',
29 silly publish   _id: 'wsdl2.js-ssl@0.1.0',
29 silly publish   scripts: {},
29 silly publish   _shasum: '4f14ff97ab0e801c7f70ed800cef843fe595fd30',
29 silly publish   _from: '.' }
30 verbose request where is /wsdl2.js-ssl
31 verbose request registry http://registry.npmjs.org/
32 verbose request id bf265c5519159803
33 verbose url raw /wsdl2.js-ssl
34 verbose url resolving [ 'http://registry.npmjs.org/', './wsdl2.js-ssl' ]
35 verbose url resolved http://registry.npmjs.org/wsdl2.js-ssl
36 verbose request where is http://registry.npmjs.org/wsdl2.js-ssl
37 info trying registry request attempt 1 at 05:49:11
38 http PUT http://registry.npmjs.org/wsdl2.js-ssl
39 http 403 http://registry.npmjs.org/wsdl2.js-ssl
40 verbose headers { server: 'CouchDB/1.5.0 (Erlang OTP/R14B04)',
40 verbose headers   'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=60',
40 verbose headers   'content-length': '10871',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   date: 'Fri, 12 Sep 2014 04:49:13 GMT',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   connection: 'keep-alive',
40 verbose headers   'x-served-by': 'cache-lcy1121-LCY',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1410497351.757068,VS0,VE1526' }
41 error publish Failed PUT 403
42 error Error: forbidden cannot modify pre-existing version: 0.1.0
42 error old={"author":{"name":"Ricardo Sousa","email":"ricardo.sousa@challenge.pt","url":"http://www.challenge.pt/"},"name":"wsdl2.js-ssl","description":"Consumes a WSDL file and produces a high quality, manageable Javascript library with TLS/SSL support.","version":"0.1.0","repository":{"type":"git","url":"https://github.com/challengeit/wsdl2.js-ssl.git"},"keywords":["soap","wsdl","ssl","tls","generator","converter"],"dependencies":{"request":">=2.16.6","xml2json":">=0.3.2"},"engines":{"node":"*"},"preferGlobal":"true","main":"wsdl2-ssl.js","license":"GPL","gitHead":"96cb4f005ebba8dcd2855040ea1040a673b4821f","bugs":{"url":"https://github.com/challengeit/wsdl2.js-ssl/issues"},"homepage":"https://github.com/challengeit/wsdl2.js-ssl","_id":"wsdl2.js-ssl@0.1.0","scripts":{},"_shasum":"f94271d67f8201328232ced82e16028ecb89232e","_from":".","_npmVersion":"1.4.26","_npmUser":{"name":"rikmms","email":"ricardo.sousa@challenge.pt"},"maintainers":[{"name":"rikmms","email":"ricardo.sousa@challenge.pt"}],"dist":{"shasum":"f94271d67f8201328232ced82e16028ecb89232e","tarball":"http://registry.npmjs.org/wsdl2.js-ssl/-/wsdl2.js-ssl-0.1.0.tgz"}}
42 error new={"author":{"name":"Ricardo Sousa","email":"ricardo.sousa@challenge.pt","url":"http://www.challenge.pt/"},"name":"wsdl2.js-ssl","description":"Consumes a WSDL file and produces a high quality, manageable Javascript library with TLS/SSL support.","version":"0.1.0","repository":{"type":"git","url":"https://github.com/challengeit/wsdl2.js-ssl.git"},"keywords":["soap","wsdl","ssl","tls","generator","converter"],"dependencies":{"request":">=2.16.6","xml2json":">=0.3.2"},"engines":{"node":"*"},"preferGlobal":"true","main":"wsdl2-ssl.js","license":"GPL","readme":"## About this\u000a\u000aThis is a fork from [wsdl2.js](https://github.com/holidayextras/wsdl2.js) repository with support for TLS/SSL.\u000a\u000aAt this point, only PFX and PKCS12 formats are supported.\u000a\u000aFor use the wsdl2.js-ssl: \u000a\u000a- ```wsdl2.js-sll [serviceName] [/local/path/to/wsdl] -pfx=[/local/path/to/pfx_p12] -passphrase=\"password\"```\u000a\u000aThe new options ``-pfx`` and ```-passphrase``` are optional. Are only needed for TLS/SSL.\u000a\u000a\u000a---\u000a\u000a# Original README from Wsdl2.js\u000a\u000a## Introduction\u000aThis is a NodeJS tool to consume a WSDL file and output a neat, manageable Javascript library. It is not 100% complete, but it gives us full coverage of the services we need at Holiday Extras. If it doesn't do everything you need, fork us and contribute back to the community :)\u000a\u000a## Where do I find it?\u000aEither get it from npm:\u000a```\u000asudo npm install -g wsdl2.js\u000a```\u000aOr checkout the repo:\u000a```\u000agit clone https://github.com/holidayextras/wsdl2.js.git\u000anpm install\u000a```\u000a\u000a## How do I use it?\u000aThis will generate a folder called [serviceName] in the current directory ready to be require'd and used:\u000a```\u000awsdl2.js [serviceName] [/local/path/to/wsdl]\u000a```\u000a\u000a## Requirements for using the generated code\u000aNote: these modules are installed by npm-installing wsdl2.js\u000a```\u000anpm install request xml2json\u000a```\u000a\u000a## Generated code structure\u000a```\u000a./[ServiceName]/\u000a|   // This holds one file per defined Element within the WSDL\u000a├── Element\u000a│   ├── SomeDefinedElement.js\u000a|   └── ...\u000a|   // This is the main file which handles requests, JSON->XML->JSON, etc\u000a├── index.js\u000a|   // This is where mock data goes from [myService].Settings.createMock\u000a├── Mocks\u000a│   ├── WsdlOperationName.js\u000a|   └── ...\u000a|   // This library provides strong typing, it's used in each Element/Type\u000a├── Modeler.js\u000a|   // This file defines the top level functionality found within the WSDL\u000a├── ServiceDefinition.js\u000a|   // This holds one file per defined Type within the WSDL\u000a└── Type\u000a    ├── SomeDefinedType.js\u000a    └── ...\u000a```\u000a\u000a## Using the generated code\u000aStart by including the generated code:\u000a```javascript\u000avar Service = require(\"path/to/generated/code\");\u000avar EC2 = require(\"lib/EC2\");\u000a```\u000aThis is how we create a new request:\u000a```javascript\u000avar someRequest = new Service.[WSDL-Binding-Name].[WSDL-Operation-Name]();\u000avar assignRequest = new EC2.AmazonEC2Port.AssignPrivateIpAddresses();\u000a```\u000aSetting basic properties is trivial\u000a```javascript\u000asomeRequest.someSimpleProperty = 1;\u000a```\u000aMost requests consist of several complex types, they are all found within our service object:\u000a```javascript\u000asomeRequest.someElementProperty = new Service.Elements.[WSDL-Element-Name]();\u000asomeRequest.someTypeProperty = new Service.Types.[WSDL-Type-Name]();\u000a```\u000aPopulating Requests/Elements/Types can be done one at a time:\u000a```javascript\u000asomeRequest.someNumber = 1;\u000asomeRequest.someString = \"1\";\u000a```\u000aWe can also populate directly from a JSON object:\u000a```javascript\u000avar json = { someNumber: 1, someString: \"1\" };\u000asomeRequest = new Service.TestRequest(json);\u000a// someRequest.someNumber == 1\u000a// someRequest.someString == \"1\"\u000a```\u000aTrying to set a property's value to an invalid type will be discarded:\u000a```javascript\u000asomeRequest.PersonElement = null;\u000asomeRequest.PersonElement = new SomeRandomObject();\u000a// someRequest.PersonElement == null;\u000a```\u000aIf we have an array of objects there's a helper function to save typing:\u000a```javascript\u000asomeRequest.PeopleList = new Service.Types.ArrayOfPeople;\u000asomeRequest.PeopleList.newChild({ firstname: \"Oli\", age: 24 });\u000a// is the equivalent of:\u000asomeRequest.PeopleList = new Service.Types.ArrayOfPeople;\u000avar newPerson = new Service.Types.Person();\u000anewPerson.firstname = \"Oli\";\u000anewPerson.age = 24;\u000asomeRequest.PeopleList.push(newPerson);\u000a```\u000aMaking the request is trivial:\u000a```javascript\u000asomeRequest.request(function(err, response) {\u000a  // 'response' is a modeled object, it WILL conform to the WSDL.\u000a  //... w00p!\u000a});\u000a```\u000aOnce we have a request and we want to edit it by adding properties not found in the WDSL, we must first extract the data from the response:\u000a```javascript\u000asomeRequest.request(function(err, response) {\u000a  response.SomeInvalidProperty = \"testing\";\u000a  // response.SomeInvalidProperty == null\u000a  var myResponse = response.extract();\u000a  myResponse.SomeInvalidProperty = \"testing\";\u000a  // myResponse.SomeInvalidProperty == \"testing\"\u000a});\u000a```\u000a\u000a## Runtime Settings and Debugging\u000a```javascript\u000avar Service = require(\"path/to/generated/code\");\u000a\u000a// This next statement will enable debugging for ALL soap requests\u000a// It prints to stdout JSON objects, XML documents, etc\u000a// default: false\u000aService.Settings.debugSoap = true;\u000a\u000a// This next statement will enable benchmarking for ALL soap requests\u000a// It prints to stdout the name of each request and its duration in ms\u000a// default: true\u000aService.Settings.benchmark = true;\u000a\u000a// This next statement will store the most recent request of each type to file\u000a// It outputs to [/path/to/generated/code]/Mocks/[request-name]\u000a// default: false\u000aService.Settings.createMock = true;\u000a\u000a// This next statement will use saved mock requests instead of real requests\u000a// default: false\u000aService.Settings.useMock = true;\u000a\u000a// We can debug single SOAP requests by using the .debug() function, which is\u000a// a property of every request and response object\u000avar additionRequest = new Service.MathService.AdditionFunction(json);\u000aadditionRequest.debug(); // Watch your console output\u000aadditionRequest.request(function(err, response) {\u000a  response.debug(); // Watch your console output\u000a  if (err || !response) {\u000a    return callback(err || \"No response?\");\u000a  }\u000a  \u000a  //... w00p!\u000a});\u000a```\u000a\u000a## Checking the generated service definition\u000aGeneric example of ./[ServiceName]/ServiceDefinition.js:\u000a```javascript\u000amodule.exports = {\u000a  \"[WSDL-Binding-Name]\": {\u000a    \"namespace\": \"http://blahblah.com/webservices/\",\u000a    \"serviceUrl\": \"https://www.blahblah.com/path/to/service.blah\",\u000a    \"[WSDL-Operation-Name]\": {\u000a      \"soapAction\": \"blahblahblah\",\u000a      \"input\": \"[Top-Level-Request-Element-For-Operation]\",\u000a      \"output\": \"[Top-Level-Response-Element-For-Operation]\"\u000a    },\u000a    ...\u000a  },\u000a  ...\u000a}\u000a```\u000aExample of Amazon's EC2 service:\u000a```javascript\u000amodule.exports = {\u000a  \"AmazonEC2Port\": {\u000a    \"namespace\": \"http://ec2.amazonaws.com/doc/2013-02-01/\",\u000a    \"serviceUrl\": \"https://ec2.amazonaws.com/\",\u000a    \"ActivateLicense\": {\u000a      \"soapAction\": \"ActivateLicense\",\u000a      \"input\": \"ElementActivateLicense\",\u000a      \"output\": \"ElementActivateLicenseResponse\"\u000a    },\u000a    \"AssignPrivateIpAddresses\": {\u000a      \"soapAction\": \"AssignPrivateIpAddresses\",\u000a      \"input\": \"ElementAssignPrivateIpAddresses\",\u000a      \"output\": \"ElementAssignPrivateIpAddressesResponse\"\u000a    },\u000a    ...\u000a  },\u000a  ...\u000a}\u000a```\u000a\u000a","readmeFilename":"README.md","gitHead":"c0e1d9971bf3dd325f1c85f117ac4caf29921b57","bugs":{"url":"https://github.com/challengeit/wsdl2.js-ssl/issues"},"homepage":"https://github.com/challengeit/wsdl2.js-ssl","_id":"wsdl2.js-ssl@0.1.0","scripts":{},"_shasum":"4f14ff97ab0e801c7f70ed800cef843fe595fd30","_from":".","_npmVersion":"1.4.26","_npmUser":{"name":"rikmms","email":"ricardo.sousa@challenge.pt"},"maintainers":[{"name":"rikmms","email":"ricardo.sousa@challenge.pt"}],"dist":{"shasum":"4f14ff97ab0e801c7f70ed800cef843fe595fd30","tarball":"http://registry.npmjs.org/wsdl2.js-ssl/-/wsdl2.js-ssl-0.1.0.tgz"}}: wsdl2.js-ssl
42 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:308:14)
42 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
42 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
42 error     at Request.EventEmitter.emit (events.js:98:17)
42 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
42 error     at Request.EventEmitter.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
42 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
42 error     at _stream_readable.js:920:16
42 error     at process._tickCallback (node.js:415:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Darwin 13.2.0
45 error command "node" "/usr/local/bin/npm" "publish"
46 error cwd /Users/ricardo/Documents/Work/Challenge_IT/projects_inOffice/wsdl2.js-ssl/source_code
47 error node -v v0.10.21
48 error npm -v 1.4.26
49 verbose exit [ 1, true ]
